export default {
  async fetch(request: Request, env: any, ctx: any): Promise<Response> {
    if (request.method === "POST") {
      try {
        const { url, text } = await request.json();
        const key = url ?? text ?? "";
        // simple in-memory store for summaries
        // @ts-ignore
        // use a global object on the worker to persist summaries across requests
        (globalThis as any).__SUMMARIES = (globalThis as any).__SUMMARIES || {};
        const summaries: Record<string, string> = (globalThis as any).__SUMMARIES;

        if (key && summaries[key]) {
          return new Response(JSON.stringify({ summary: summaries[key], cached: true }), {
            headers: { "Content-Type": "application/json" },
          });
        }

        // TODO: integrate with Workers AI summarization API (e.g., using env variables)
        // For demonstration, return placeholder summary.
        const summary = "This is a placeholder summary generated by the AI model.";

        if (key) {
          summaries[key] = summary;
        }

        return new Response(JSON.stringify({ summary }), {
          headers: { "Content-Type": "application/json" },
        });
      } catch (err: any) {
        return new Response(
          JSON.stringify({ error: "Invalid request", details: err.message }),
          {
            status: 400,
            headers: { "Content-Type": "application/json" },
          },
        );
      }
    }

    return new Response(
      "Please send a POST request with JSON { url: string, text: string }",
      {
        status: 200,
        headers: { "Content-Type": "text/plain" },
      },
    );
  },
};
